name: Transpiler (Release)
on:
  push:
    branches: 
    - "main"
  pull_request:
    branches: 
    - "main"
  workflow_call: # Added this line to make it reusable
    # Add inputs here if needed. Example:
    # inputs:
    #   some_input:
    #     required: false
    #     type: string

# -win32-arm64 -win32-ia32 -win32-x64 -darwin-arm64 -darwin-x64 -linux-arm64 -linux-armv7l -linux-x64 -mas-arm64 -mas-x64

jobs:

  # Windows
  build-transpiler-release-on-windows-latest-x86-64:
    name: Windows 64-bits
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11 (or later)
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Install Visual Studio Build Tools
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Make the "transpiler/build" directory
      run: mkdir ${{github.workspace}}/transpiler/build

    - name: Configure CMake
      run: cmake .. -DCMAKE_BUILD_TYPE=Release -A x64
      working-directory: transpiler/build

    - name: Build
      run: cmake --build . --config Release
      working-directory: transpiler/build

    - name: Run Tests
      run: ctest -VV -C Release
      working-directory: transpiler/build

    - name: Bundle Binaries (only on workflow_call)
#      if: github.event_name == 'workflow_call'
      run: |
        Compress-Archive -Path ${{github.workspace}}/transpiler/dist/Release/x86_64/* -DestinationPath ${{github.workspace}}/transpiler/dist/bundle.zip

    - name: Extract version (only on workflow_call)
#      if: github.event_name == 'workflow_call'
      run: |
        $version = Get-Content "${{github.workspace}}/transpiler/manifest.ini" | Where-Object { $_ -match 'VERSION=' } | ForEach-Object { ($_ -split '=')[1].Trim('"') }
        if ($version) {
          echo "VERSION=$version" >> $env:GITHUB_ENV
        } else {
          Write-Error "VERSION not found in manifest.ini"
          exit 1
        }

    - name: Upload Binaries Artifact (only on workflow_call)
#      if: github.event_name == 'workflow_call'
      uses: actions/upload-artifact@v4
      with:
        name: PolarFrankie-v${{env.VERSION}}-Windows-x86_64.zip
        path: ${{github.workspace}}/transpiler/dist/bundle.zip

  # Linux
  build-transpiler-release-on-ubuntu-latest:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake valgrind

    - name: Make the "transpiler/build" directory
      run: mkdir ${{github.workspace}}/transpiler/build

    - name: Configure CMake
      run: cmake .. -DCMAKE_BUILD_TYPE=Release
      working-directory: transpiler/build

    - name: Build
      run: cmake --build . --config Release
      working-directory: transpiler/build

    - name: Run Tests
      run: ctest -VV -C Release
      working-directory: transpiler/build

    - name: Bundle Binaries (only on workflow_call) AAAAAAAA
#      if: github.event_name == 'workflow_call'
      run: |
        Compress-Archive -Path ${{github.workspace}}/transpiler/dist/Release/x86_64/* -DestinationPath ${{github.workspace}}/transpiler/dist/bundle.zip

    - name: Extract version (only on workflow_call) AAAAAAAA
#      if: github.event_name == 'workflow_call'
      run: |
        VERSION=$(grep "^version" ${{github.workspace}}/transpiler/manifest.ini | sed 's/version *= *//')
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Upload Binaries Artifact (only on workflow_call) AAAAAAAA
#      if: github.event_name == 'workflow_call'
      uses: actions/upload-artifact@v4
      with:
        name: PolarFrankie-v${{env.VERSION}}-Windows-x86_64.zip
        path: ${{github.workspace}}/transpiler/dist/bundle.zip

  # macOS
  build-transpiler-release-on-macos-latest:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        brew update
        brew install cmake

    - name: Make the "transpiler/build" directory
      run: mkdir ${{github.workspace}}/transpiler/build

    - name: Configure CMake
      run: cmake .. -DCMAKE_BUILD_TYPE=Release
      working-directory: transpiler/build

    - name: Build
      run: cmake --build . --config Release
      working-directory: transpiler/build

    - name: Run Tests
      run: ctest -VV -C Release
      working-directory: transpiler/build
